import { NextResponse } from 'next/server';

/**
 * API Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠ POST ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° Push ‡∏ú‡πà‡∏≤‡∏ô LINE Messaging API
 * @param {Request} request - The incoming request object from Next.js.
 */
export async function POST(request) {
  // ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ Channel Access Token ‡∏à‡∏≤‡∏Å Environment Variables
  const accessToken = process.env.LINE_CHANNEL_ACCESS_TOKEN;

  try {
    // 1. ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• userId ‡πÅ‡∏•‡∏∞ seatNumber ‡∏à‡∏≤‡∏Å body ‡∏Ç‡∏≠‡∏á request
    const { userId, seatNumber } = await request.json();

    // 2. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
    if (!userId || !seatNumber || !accessToken) {
      return NextResponse.json(
        { message: 'Missing required parameters: userId, seatNumber, or Access Token' },
        { status: 400 } // Bad Request
      );
    }

    // 3. ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE API
    const body = {
      to: userId,
      messages: [
        {
          type: 'text',
          text: `‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${seatNumber}\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏Å‡∏±‡∏ö‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ñ‡∏£‡∏±‡∏ö üòä`,
        },
      ],
    };

    // 4. ‡∏™‡πà‡∏á Request ‡πÑ‡∏õ‡∏¢‡∏±‡∏á LINE Messaging API
    const response = await fetch('https://api.line.me/v2/bot/message/push', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${accessToken}`, // ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ï‡∏ô‡∏î‡πâ‡∏ß‡∏¢ Access Token
      },
      body: JSON.stringify(body),
    });

    // 5. ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å LINE API
    if (!response.ok) {
      const result = await response.json();
      console.error('LINE API Error:', result);
      throw new Error(result.message || 'Failed to send message to LINE API');
    }

    // 6. ‡∏´‡∏≤‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 200 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    return NextResponse.json({ message: 'Notification sent successfully!' });

  } catch (error) {
    // 7. ‡∏´‡∏≤‡∏Å‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏î‡πÜ ‡πÉ‡∏ô‡∏Å‡∏£‡∏∞‡∏ö‡∏ß‡∏ô‡∏Å‡∏≤‡∏£ ‡∏™‡πà‡∏á‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞ 500 ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
    console.error('Internal Server Error:', error);
    return NextResponse.json(
      { message: 'Internal Server Error', error: error.message },
      { status: 500 }
    );
  }
}
