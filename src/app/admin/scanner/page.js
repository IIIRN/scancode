'use client';

import { useState, useEffect, useRef } from 'react';
import { Html5Qrcode } from 'html5-qrcode'; // üëà ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏°‡∏≤‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏î‡πâ‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
import { db } from '../../../lib/firebase';
import { doc, getDoc, updateDoc, addDoc, collection, serverTimestamp } from 'firebase/firestore';

// Component ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á
const CameraIcon = () => (
    <svg xmlns="http://www.w3.org/2000/svg" className="h-16 w-16 mb-4" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={1}>
        <path strokeLinecap="round" strokeLinejoin="round" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z" />
    </svg>
);

export default function AdminScannerPageV2() {
  // üîª State ‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏´‡∏ô‡πâ‡∏≤‡∏à‡∏≠: 'idle', 'scanning', 'found', 'submitting'
  const [scannerState, setScannerState] = useState('idle'); 

  const [registrationData, setRegistrationData] = useState(null);
  const [activityName, setActivityName] = useState('');
  const [seatNumberInput, setSeatNumberInput] = useState('');
  const [message, setMessage] = useState('');
  
  // Ref ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö instance ‡∏Ç‡∏≠‡∏á html5QrCode
  const qrScannerRef = useRef(null);

  // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡∏Ç‡∏≠‡∏á qrcode scanner ‡πÅ‡∏Ñ‡πà‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
  useEffect(() => {
    // ‡∏™‡∏£‡πâ‡∏≤‡∏á instance ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô
    qrScannerRef.current = new Html5Qrcode("reader");

    // Cleanup function: ‡∏à‡∏∞‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ
    return () => {
      if (qrScannerRef.current?.isScanning) {
        qrScannerRef.current.stop().catch(err => console.error("Cleanup stop failed", err));
      }
    };
  }, []);

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á
  const handleStartScanner = async () => {
    if (!qrScannerRef.current) return;
    resetState();
    setScannerState('scanning');
    try {
      await qrScannerRef.current.start(
        { facingMode: "environment" }, // ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏´‡∏•‡∏±‡∏á
        { fps: 10, qrbox: { width: 250, height: 250 } },
        handleScanSuccess, // callback ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        (errorMessage) => { /* console.log("QR Code no match.", errorMessage); */ }
      );
    } catch (err) {
      console.error("Failed to start scanner", err);
      setMessage("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ");
      setScannerState('idle');
    }
  };

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πÅ‡∏Å‡∏ô QR Code ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  const handleScanSuccess = async (decodedText) => {
    if (scannerState === 'found') return; // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô‡∏ã‡πâ‡∏≥
    
    // ‡∏´‡∏¢‡∏∏‡∏î‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡πâ‡∏≠‡∏á‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
    if (qrScannerRef.current?.isScanning) {
      await qrScannerRef.current.stop();
    }
    
    setScannerState('submitting'); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    setMessage(`‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö ID: ${decodedText}`);

    try {
      const regRef = doc(db, 'registrations', decodedText);
      const regSnap = await getDoc(regRef);
      if (regSnap.exists()) {
        const regData = { id: regSnap.id, ...regSnap.data() };
        setRegistrationData(regData);
        // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
        const actRef = doc(db, 'activities', regData.activityId);
        const actSnap = await getDoc(actRef);
        if (actSnap.exists()) setActivityName(actSnap.data().name);
        
        setScannerState('found'); // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡πâ‡∏ß
        setMessage('');
      } else {
        throw new Error('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô');
      }
    } catch (err) {
      setMessage(`‚ùå ${err.message}`);
      setTimeout(() => setScannerState('idle'), 3000);
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô
  const handleConfirmCheckIn = async (e) => {
    e.preventDefault();
    if (!registrationData || !seatNumberInput.trim()) {
      setMessage("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á"); return;
    }
    setScannerState('submitting');
    setMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...');
    try {
      // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï, ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Log, ‡∏™‡πà‡∏á‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô (Logic ‡πÄ‡∏î‡∏¥‡∏°)
      const regRef = doc(db, 'registrations', registrationData.id);
      await updateDoc(regRef, { status: 'checked-in', seatNumber: seatNumberInput.trim() });
      
      await addDoc(collection(db, 'checkInLogs'), { /* ... log data ... */ });
      
      if (registrationData.lineUserId) {
          const notificationMessage = `‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏° "${activityName}" ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\n‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏•‡∏Ç: ${seatNumberInput.trim()}`;
          await fetch('/api/send-notification', { /* ... fetch options ... */ });
      }

      setMessage(`‚úÖ ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á ${seatNumberInput.trim()}`);
      setTimeout(() => {
        resetState();
        setScannerState('idle'); // ‡∏Å‡∏•‡∏±‡∏ö‡∏™‡∏π‡πà‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
      }, 2000);
    } catch (err) {
      setMessage(`‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${err.message}`);
      setScannerState('found'); // ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
    }
  };
  
  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå State
  const resetState = () => {
    setRegistrationData(null);
    setActivityName('');
    setSeatNumberInput('');
    setMessage('');
  };

  // Component ‡∏¢‡πà‡∏≠‡∏¢ (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°)
  const StatusBadge = ({ status }) => { /* ... */ };

  return (
    <div className="max-w-xl mx-auto p-4 md:p-8 font-sans">
      <div className="bg-white p-6 rounded-lg shadow-2xl min-h-[500px] flex flex-col justify-center items-center">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</h1>

        {/* --- UI ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô: ‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á --- */}
        {scannerState === 'idle' && (
          <button onClick={handleStartScanner} className="flex flex-col items-center text-blue-600 hover:text-blue-800 transition-colors">
            <CameraIcon />
            <span className="text-xl font-semibold">‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡πÅ‡∏Å‡∏ô</span>
          </button>
        )}

        {/* --- UI ‡∏Ç‡∏ì‡∏∞‡∏™‡πÅ‡∏Å‡∏ô: ‡πÅ‡∏™‡∏î‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á --- */}
        <div id="reader" className={`${scannerState === 'scanning' ? 'block' : 'hidden'} w-full max-w-sm border-2 border-gray-300 rounded-lg overflow-hidden`}></div>
        {scannerState === 'scanning' && <p className="mt-4 text-gray-500">‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏´‡∏±‡∏ô‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà QR Code</p>}
        
        {/* --- UI ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏à‡∏≠‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•/‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô --- */}
        {(scannerState === 'found' || scannerState === 'submitting') && registrationData && (
          <div className="w-full animate-fade-in">
            <h2 className="text-2xl font-bold mb-4">‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô</h2>
            <div className="space-y-2 text-gray-700 bg-gray-50 p-4 rounded-lg border">
              <p><strong>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</strong> {registrationData.fullName}</p>
              <p><strong>‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°:</strong> {activityName}</p>
              <p className="flex items-center gap-2"><strong>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞:</strong> <StatusBadge status={registrationData.status} /></p>
            </div>
            <hr className="my-4"/>
            
            {registrationData.status !== 'checked-in' ? (
              <form onSubmit={handleConfirmCheckIn} className="space-y-3">
                <label htmlFor="seatNumber" className="block text-sm font-medium text-gray-700">‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á</label>
                <input type="text" id="seatNumber" value={seatNumberInput} onChange={(e) => setSeatNumberInput(e.target.value)} required className="w-full p-2 border border-gray-300 rounded-md" />
                <button type="submit" disabled={scannerState === 'submitting'} className="w-full py-3 bg-blue-600 text-white font-semibold rounded-md hover:bg-blue-700 disabled:bg-blue-300">
                  {scannerState === 'submitting' ? '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£...' : '‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ô'}
                </button>
              </form>
            ) : (
              <p className="text-center font-semibold text-green-600">‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ô‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ä‡πá‡∏Ñ‡∏≠‡∏¥‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß (‡∏ó‡∏µ‡πà‡∏ô‡∏±‡πà‡∏á: {registrationData.seatNumber})</p>
            )}
          </div>
        )}

        {/* --- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö --- */}
        {message && <p className="mt-4 text-center font-bold text-lg text-red-600">{message}</p>}
      </div>
    </div>
  );
}